generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  username    String     @unique
  password    String
  email       String?    @unique
  gender      String?
  nickname    String?
  dateOfBirth DateTime?  @db.Date
  language    String?
  nation      String?
  avatar      String?    @default("")
  urlCode     String?    @unique(map: "User_urlcode_key")
  balance     Int?       @default(0)
  dateJoin    DateTime   @default(now())
  donateTotal Int        @default(0)
  Contract    Contract[]
  Donate      Donate[]
  Follow      Follow[]
  OTP         OTP?
  Player      Player?
  Post        Post[]
  Rating      Rating[]
}

model Follow {
  player_id String
  user_id   String
  Player    Player @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_follow_player_id")
  User      User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_follow_user_id")

  @@id([player_id, user_id])
  @@index([user_id], map: "fk_follow_user_id")
}

model Player {
  id           String       @id
  fee          Int          @default(0)
  name         String
  description  String       @db.VarChar(255)
  status       String       @default("0")
  follower     Int          @default(0)
  hiredTime    Int          @default(0)
  completeRate Float        @default(0)
  album        String       @db.VarChar(3000)
  device       String       @db.VarChar(255)
  dateJoin     DateTime     @db.Date
  avgRate      Float        @default(0)
  totalRate    Float        @default(0)
  User         User         @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_player_id")
  Contract     Contract[]
  Donate       Donate[]
  Follow       Follow[]
  PlayerGame   PlayerGame[]
  Rating       Rating[]
}

model Contract {
  id         String          @id
  user       String
  player     String
  time       Int
  fee        Int
  status     Contract_status
  created_at DateTime        @db.Timestamp(0)
  Player     Player          @relation(fields: [player], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_player")
  User       User            @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")

  @@index([player], map: "fk_player")
  @@index([user], map: "fk_user")
}

model Donate {
  id          String   @id
  user        String
  player      String
  money       Int
  displayName String   @db.VarChar(255)
  message     String   @db.VarChar(255)
  created_at  DateTime @db.Timestamp(0)
  Player      Player   @relation(fields: [player], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_donate_player")
  User        User     @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_donate_user")

  @@index([player], map: "fk_donate_player")
  @@index([user], map: "fk_donate_user")
}

model OTP {
  user       String   @id
  mail       String
  otp        String   @unique(map: "otp_otp_key") @db.VarChar(6)
  expired_at DateTime @db.Timestamp(0)
  User       User     @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_otp_user")
}

model Rating {
  player     String
  user       String
  comment    String    @db.VarChar(255)
  rate       Int
  created_at DateTime  @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  Player     Player    @relation(fields: [player], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rating_player")
  User       User      @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rating_user")

  @@id([player, user])
  @@index([user], map: "fk_rating_user")
}

model Game {
  id         String       @id
  game       String
  gameImg    String
  PlayerGame PlayerGame[]
}

model PlayerGame {
  player String
  game   String
  Game   Game   @relation(fields: [game], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_playergame_game")
  Player Player @relation(fields: [player], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_playergame_player")

  @@id([player, game])
  @@index([game], map: "fk_playergame_game")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}

model Post {
  id         String    @id
  user       String
  content    String    @db.VarChar(255)
  media      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  User       User      @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_post_user")

  @@index([user], map: "fk_post_user")
}

enum Contract_status {
  Pending
  Processing
  Completed
  Canceled
}
